# CloudFormation Template
AWSTemplateFormatVersion: 2010-09-09
Description: Bedrock Agents for EKS Base Stack
Parameters:
  EmbeddingModelARN:
    Type: String
    Default: arn:aws:bedrock:us-west-2::foundation-model/amazon.titan-embed-text-v2:0
  FoundationModelName: 
    Type: String
    Default: anthropic.claude-3-5-sonnet-20241022-v2:0
  FoundationModelARN:
    Type: String
    Default: arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0
  AgentInstruction: 
    Type: String
    Default: >
      You are a Kubernetes expert that can answer questions about Kubernetes and Amazon EKS.
      You can also query the API Server of an Amazon EKS cluster in order to retrieve information about Kubernetes resources and perform various actions.
  KnowledgeBaseBucketName:
    Type: String
    MinLength: 3
  SchemaBucketName: 
    Type: String
    MinLength: 3
      
Resources:
  # Bedrock Knowledge Base IAM Role
  BedrockKnowledgeBaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
        Version: "2012-10-17"
      RoleName: AmazonBedrockExecutionRoleForKnowledgeBase_kb_test

  # Bedrock Knowledge Base IAM Policy
  BedrockKnowledgeBasePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: bedrock:InvokeModel
            Effect: Allow
            Resource: 
              - !Ref EmbeddingModelARN
          - Action: s3:ListBucket
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${KnowledgeBaseBucketName}"
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${KnowledgeBaseBucketName}/*"
          - Action: aoss:APIAccessAll
            Effect: Allow
            Resource: !GetAtt OpenSearchCollection.Arn
        Version: "2012-10-17"
      PolicyName: BedrockKnowledgeBasePolicy
      Roles:
        - !Ref BedrockKnowledgeBaseRole
    DependsOn: CustomResource

  # Indexer Lambda Function IAM Role
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  # Indexer Lambda Function IAM Policy
  CustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: aoss:APIAccessAll
            Effect: Allow
            Resource: !GetAtt OpenSearchCollection.Arn
        Version: "2012-10-17"
      PolicyName: CustomResourcePolicy
      Roles:
        - !Ref CustomResourceRole

  # Network Access Policy for OpenSearch Collection
  OpenSearchNetworkPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: opensearch-network-policy
      Policy: '[{"Rules": [{"Resource": ["collection/opensearch-vector-collection"], "ResourceType": "dashboard"}, {"Resource": ["collection/opensearch-vector-collection"], "ResourceType": "collection"}], "AllowFromPublic": true}]'
      Type: network

  # Encryption Policy for OpenSearch Collection
  OpenSearchEncryptionPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: opensearch-encryption-policy
      Policy: '{"Rules": [{"ResourceType": "collection", "Resource": ["collection/opensearch-vector-collection"]}], "AWSOwnedKey": true}'
      Type: encryption

  # Data Access Policy for OpenSearch Collection
  OpenSearchDataAccessPolicy:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: embeddings-access-policy
      Policy:
        !Join
          - ""
          - - '[{"Rules": [{"Resource": ["collection/opensearch-vector-collection"], "Permission": ["aoss:DescribeCollectionItems", "aoss:CreateCollectionItems", "aoss:UpdateCollectionItems"], "ResourceType": "collection"}, {"Resource": ["index/opensearch-vector-collection/*"], "Permission": ["aoss:UpdateIndex", "aoss:DescribeIndex", "aoss:ReadDocument", "aoss:WriteDocument", "aoss:CreateIndex"], "ResourceType": "index"}], "Principal": ["'
            - !GetAtt BedrockKnowledgeBaseRole.Arn
            - '", "'
            - !GetAtt CustomResourceRole.Arn
            - '"]}]'
      Type: data

  # OpenSearch Collection
  OpenSearchCollection:
    Type: AWS::OpenSearchServerless::Collection
    Properties:
      Name: opensearch-vector-collection
      Type: VECTORSEARCH
    DependsOn:
      - OpenSearchDataAccessPolicy
      - OpenSearchEncryptionPolicy
      - OpenSearchNetworkPolicy

  # Indexer Function
  CustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../build/index_lambda_build/.
      Environment:
        Variables:
          COLLECTION_ENDPOINT: !GetAtt OpenSearchCollection.CollectionEndpoint
          VECTOR_INDEX_NAME: vector-index
          VECTOR_FIELD_NAME: vector-field
          TEXT_FIELD: text-field
          METADATA_FIELD: metadata-field
      Handler: create_vector_index.on_event
      ReservedConcurrentExecutions: 5
      Role: !GetAtt CustomResourceRole.Arn
      Runtime: python3.10
      Timeout: 600
    DependsOn:
      - CustomResourcePolicy

  # Indexer Custom Resource
  CustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomResourceFunction.Arn

  # Knowledge Base
  BedrockKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: k8s-docs-knowledge-base
      RoleArn: !GetAtt BedrockKnowledgeBaseRole.Arn
      KnowledgeBaseConfiguration:
        Type: "VECTOR"
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Ref EmbeddingModelARN
      StorageConfiguration:
        Type: "OPENSEARCH_SERVERLESS"
        OpensearchServerlessConfiguration:
          CollectionArn: !GetAtt OpenSearchCollection.Arn
          VectorIndexName: vector-index
          FieldMapping:
            VectorField: vector-field
            TextField: text-field
            MetadataField: metadata-field
    DependsOn: 
      - BedrockKnowledgeBasePolicy
      - CustomResource

  # Data Source
  DataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      KnowledgeBaseId: !Ref BedrockKnowledgeBase
      Name: k8s-docs-data-source
      DataSourceConfiguration:
        Type: "S3"
        S3Configuration:
          BucketArn: !Sub "arn:aws:s3:::${KnowledgeBaseBucketName}"

  # Bedrock Agent IAM Roles
  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
        Version: "2012-10-17"
      RoleName: AmazonBedrockExecutionRoleForAgents_agent_test

  # Bedrock Agent IAM Policy
  BedrockAgentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: bedrock:InvokeModel
            Effect: Allow
            Resource: !Ref FoundationModelARN
          - Action: bedrock:Retrieve
            Effect: Allow
            Resource: !GetAtt BedrockKnowledgeBase.KnowledgeBaseArn
          - Action: s3:GetObject
            Effect: Allow 
            Resource: !Sub "arn:${AWS::Partition}:s3:::${SchemaBucketName}/*"
        Version: "2012-10-17"
      PolicyName: BedrockAgentPolicy
      Roles:
        - !Ref BedrockAgentRole

  # Agent 
  BedrockAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: eks-bedrock-agent
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      FoundationModel: !Ref FoundationModelName
      Instruction: !Ref AgentInstruction
      KnowledgeBases:
        - KnowledgeBaseId: !Ref BedrockKnowledgeBase
          Description: "Kubernetes and Amazon EKS Documentation"
          KnowledgeBaseState: ENABLED

Outputs: 
  BedrockAgentArn:
    Description: ARN of the Bedrock Agent
    Value: !GetAtt BedrockAgent.AgentArn
    Export: 
      Name: BedrockAgentArn

  BedrockAgentId:
    Description: ID of the Bedrock Agent
    Value: !GetAtt BedrockAgent.AgentId
    Export: 
      Name: BedrockAgentId