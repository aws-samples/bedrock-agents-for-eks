# CloudFormation Template
AWSTemplateFormatVersion: 2010-09-09
Description: Bedrock Agent Resources 
Parameters:
  EKSClusterName:
    Type: String
    Default: bedrock-agent-eks-cluster

  LambdaRuntime: 
    Type: String
    Default: python3.10

  ActionGroup: 
    Type: String

  SchemaBucket:
    Type: String

  SchemaKey: 
    Type: String

Resources:
  # Bedrock Agent Lambda Function IAM Role
  ActionGroupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns: 
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      RoleName: BedrockAgentLambdaFunctionRole

  # Bedrock Agent Lambda Function IAM Policy
  ActionGroupFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: eks:DescribeCluster
            Effect: Allow
            Resource: !Sub "arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${EKSClusterName}"
      PolicyName: ActionGroupFunctionPolicy
      Roles:
        - !Ref ActionGroupFunctionRole

  # Bedrock Agent Lambda Function 
  ActionGroupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../build/ag_lambda_build/. 
      Environment:
        Variables:
          CLUSTER_NAME: !Ref EKSClusterName
      FunctionName: !Sub "${ActionGroup}-executor"
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      ReservedConcurrentExecutions: 5
      Role: !GetAtt ActionGroupFunctionRole.Arn
      Runtime: !Ref LambdaRuntime
      Timeout: 30

  # # Bedrock Agent Lambda Permission
  ActionGroupFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ActionGroupFunction.Arn
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !ImportValue BedrockAgentArn

  UserAccessEntry:
    Type: AWS::EKS::AccessEntry
    Properties:
      ClusterName: !Ref EKSClusterName
      PrincipalArn: !GetAtt ActionGroupFunctionRole.Arn
      KubernetesGroups: 
        - !Ref ActionGroup

####----------------Custom Resource to Create Action Group---------------####

  # Custom Resource Role 
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  # Custom Resource Policy
  CustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: 
              - bedrock:CreateAgentActionGroup
              - bedrock:UpdateAgentActionGroup
              - bedrock:GetAgentActionGroup
              - bedrock:DeleteAgentActionGroup
              - bedrock:ListAgentActionGroups
            Effect: Allow
            Resource: !Join 
              - ""
              - - !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}:${AWS::AccountId}:agent/"
                - !ImportValue BedrockAgentId
        Version: "2012-10-17"
      PolicyName: CustomResourcePolicy
      Roles:
        - !Ref CustomResourceRole

  CustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: create-action-group-function
      Environment:
        Variables:
          AGENT_ID: !ImportValue BedrockAgentId
          LAMBDA_ARN: !GetAtt ActionGroupFunction.Arn
          ACTION_GROUP: !Ref ActionGroup
          SCHEMA_BUCKET: !Ref SchemaBucket
          SCHEMA_KEY: !Ref SchemaKey
      Handler: create_action_group.lambda_handler
      Role: !GetAtt CustomResourceRole.Arn
      Runtime: python3.10
      Timeout: 600
      Code: ../build/create_ag_lambda_build/.
        
  # Custom Resource
  CustomResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: ActionGroupFunction
    Properties:
      ServiceToken: !GetAtt CustomResourceFunction.Arn

Outputs: 
  ActionGroupFunctionArn:
    Description: ARN of the Lambda Function
    Value: !GetAtt ActionGroupFunction.Arn
    Export: 
      Name: ActionGroupFunctionArn
