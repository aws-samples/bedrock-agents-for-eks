# CloudFormation Template
AWSTemplateFormatVersion: 2010-09-09
Description: Bedrock Agents for EKS 
Parameters:
  EmbeddingModelARN:
    Type: String
    Default: arn:aws:bedrock:us-west-2::foundation-model/amazon.titan-embed-text-v2:0
  FoundationModelName: 
    Type: String
    Default: anthropic.claude-3-5-sonnet-20241022-v2:0
  FoundationModelARN:
    Type: String
    Default: arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0
  EKSClusterName:
    Type: String
    Default: bedrock-agent-eks-cluster
  AgentInstruction: 
    Type: String
    Default: >
      You are a Kubernetes expert that can answer questions about Kubernetes and Amazon EKS.
      You can also query the API Server of an Amazon EKS cluster in order to tell users 
      what namespaces exist on the cluster, what pods have been deployed within each namespace, 
      and retrieve details of the CIS Benchmark compliance report checks.
Resources:
  # Bedrock Knowledge Base IAM Role
  BedrockKnowledgeBaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
        Version: "2012-10-17"
      RoleName: AmazonBedrockExecutionRoleForKnowledgeBase_kb_test
  # Bedrock Knowledge Base IAM Policy
  BedrockKnowledgeBasePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: bedrock:InvokeModel
            Effect: Allow
            Resource: 
              - Ref: EmbeddingModelARN
          - Action: s3:ListBucket
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - arn:aws:s3:::eks-bedrock-knowledge-base-data-source-
                  - Ref: AWS::AccountId
          - Action: s3:GetObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - arn:aws:s3:::eks-bedrock-knowledge-base-data-source-
                  - Ref: AWS::AccountId
                  - /*
          - Action: aoss:APIAccessAll
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - OpenSearchCollection
                - Arn
        Version: "2012-10-17"
      PolicyName: BedrockKnowledgeBasePolicy
      Roles:
        - Ref: BedrockKnowledgeBaseRole
    DependsOn: CustomResource
  # Indexer Lambda Function IAM Role
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  # Indexer Lambda Function IAM Policy
  CustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: aoss:APIAccessAll
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - OpenSearchCollection
                - Arn
        Version: "2012-10-17"
      PolicyName: CustomResourcePolicy
      Roles:
        - Ref: CustomResourceRole
  # Network Access Policy for OpenSearch Collection
  OpenSearchNetworkPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: opensearch-network-policy
      Policy: '[{"Rules": [{"Resource": ["collection/opensearch-vector-collection"], "ResourceType": "dashboard"}, {"Resource": ["collection/opensearch-vector-collection"], "ResourceType": "collection"}], "AllowFromPublic": true}]'
      Type: network
  # Encryption Policy for OpenSearch Collection
  OpenSearchEncryptionPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: opensearch-encryption-policy
      Policy: '{"Rules": [{"ResourceType": "collection", "Resource": ["collection/opensearch-vector-collection"]}], "AWSOwnedKey": true}'
      Type: encryption
  # Data Access Policy for OpenSearch Collection
  OpenSearchDataAccessPolicy:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: embeddings-access-policy
      Policy:
        Fn::Join:
          - ""
          - - '[{"Rules": [{"Resource": ["collection/opensearch-vector-collection"], "Permission": ["aoss:DescribeCollectionItems", "aoss:CreateCollectionItems", "aoss:UpdateCollectionItems"], "ResourceType": "collection"}, {"Resource": ["index/opensearch-vector-collection/*"], "Permission": ["aoss:UpdateIndex", "aoss:DescribeIndex", "aoss:ReadDocument", "aoss:WriteDocument", "aoss:CreateIndex"], "ResourceType": "index"}], "Principal": ["'
            - Fn::GetAtt:
                - BedrockKnowledgeBaseRole
                - Arn
            - '", "'
            - Fn::GetAtt:
                - CustomResourceRole
                - Arn
            - '"]}]'
      Type: data
  # OpenSearch Collection
  OpenSearchCollection:
    Type: AWS::OpenSearchServerless::Collection
    Properties:
      Name: opensearch-vector-collection
      Type: VECTORSEARCH
    DependsOn:
      - OpenSearchDataAccessPolicy
      - OpenSearchEncryptionPolicy
      - OpenSearchNetworkPolicy
  # Indexer Lambda Function Layer
  # CustomResourceLayer:
  #   Type: AWS::Lambda::LayerVersion
  #   Properties:
  #     CompatibleRuntimes:
  #       - python3.10
  #     Content: ./cr_lambda/indices-layer.zip
  #     Description: Required dependencies for Lambda
  # Indexer Lambda Function
  CustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: cr_lambda_build/.
      Environment:
        Variables:
          COLLECTION_ENDPOINT:
            Fn::GetAtt:
              - OpenSearchCollection
              - CollectionEndpoint
          VECTOR_INDEX_NAME: vector-index
          VECTOR_FIELD_NAME: vector-field
          TEXT_FIELD: text-field
          METADATA_FIELD: metadata-field
      Handler: indices_custom_resource.on_event
      # Layers:
      #   - Ref: CustomResourceLayer
      ReservedConcurrentExecutions: 5
      Role:
        Fn::GetAtt:
          - CustomResourceRole
          - Arn
      Runtime: python3.10
      Timeout: 600
    DependsOn:
      - CustomResourcePolicy
      - CustomResourceRole
      - OpenSearchCollection
  # Indexer Custom Resource
  CustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomResourceFunction
          - Arn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  # Bedrock Agent Lambda Function IAM Role
  ActionGroupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      RoleName: BedrockAgentLambdaFunctionRole
    DependsOn: CustomResource
  # Bedrock Agent Lambda Function IAM Policy
  ActionGroupFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: eks:DescribeCluster
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:eks:us-west-2:"
                  - Ref: AWS::AccountId
                  - ":cluster/"
                  - Ref: EKSClusterName
        Version: "2012-10-17"
      PolicyName: ActionGroupFunctionPolicy
      Roles:
        - Ref: ActionGroupFunctionRole
    DependsOn: CustomResource
  # Bedrock Agent Lambda Function Layer
  # ActionGroupFunctionLayer:
  #   Type: AWS::Lambda::LayerVersion
  #   Properties:
  #     CompatibleRuntimes:
  #       - python3.10
  #     Content: ./ag_lambda/k8s-layer.zip
  #     Description: Required dependencies for Lambda
  #   DependsOn: CustomResource
  # Bedrock Agent Lambda Function
  ActionGroupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ag_lambda_build/.
      Environment:
        Variables:
          CLUSTER_NAME:
            Ref: EKSClusterName
      FunctionName: bedrock-agent-eks-executor
      Handler: lambda_function.lambda_handler
      # Layers:
      #   - Ref: ActionGroupFunctionLayer
      MemorySize: 256
      ReservedConcurrentExecutions: 5
      Role:
        Fn::GetAtt:
          - ActionGroupFunctionRole
          - Arn
      Runtime: python3.10
      Timeout: 30
    DependsOn:
      - ActionGroupFunctionPolicy
      - ActionGroupFunctionRole
      - CustomResource
  # Bedrock Agent Lambda Permission
  ActionGroupFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ActionGroupFunction
          - Arn
      Principal: bedrock.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
          - BedrockAgent 
          - AgentArn
  # Knowledge Base
  BedrockKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: k8s-docs-knowledge-base
      RoleArn: 
        Fn::GetAtt:
          - BedrockKnowledgeBaseRole
          - Arn
      KnowledgeBaseConfiguration:
        Type: "VECTOR"
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: 
            Ref: EmbeddingModelARN
      StorageConfiguration:
        Type: "OPENSEARCH_SERVERLESS"
        OpensearchServerlessConfiguration:
          CollectionArn:
            Fn::GetAtt:
              - OpenSearchCollection
              - Arn
          VectorIndexName: vector-index
          FieldMapping:
            VectorField: vector-field
            TextField: text-field
            MetadataField: metadata-field
    DependsOn: 
      - BedrockKnowledgeBasePolicy
      - BedrockKnowledgeBaseRole
      - ActionGroupFunction
      - CustomResource
  # Data Source
  DataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      KnowledgeBaseId: 
        Ref: BedrockKnowledgeBase
      Name: k8s-docs-data-source
      DataSourceConfiguration:
        Type: "S3"
        S3Configuration:
          BucketArn: 
            Fn::Join:
              - ""
              - - "arn:aws:s3:::eks-bedrock-knowledge-base-data-source-"
                - Ref: AWS::AccountId
  # Bedrock Agent IAM Roles
  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
        Version: "2012-10-17"
      RoleName: AmazonBedrockExecutionRoleForAgents_agent_test
  # Bedrock Agent IAM Policy
  BedrockAgentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: bedrock:InvokeModel
            Effect: Allow
            Resource: 
              - Ref: FoundationModelARN
          - Action: bedrock:Retrieve
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - BedrockKnowledgeBase
                - KnowledgeBaseArn
          - Action: s3:GetObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - "eks-bedrock-agent-openapi-schema-"
                  - Ref: AWS::AccountId
                  - "/"
                  - "open-api-schema.json"
        Version: "2012-10-17"
      PolicyName: BedrockAgentPolicy
      Roles:
        - Ref: BedrockAgentRole
  # Agent 
  BedrockAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: eks-bedrock-agent
      AgentResourceRoleArn: 
        Fn::GetAtt:
          - BedrockAgentRole
          - Arn
      FoundationModel:
        Ref: FoundationModelName
      Instruction: 
        Ref: AgentInstruction
      ActionGroups:
        - ActionGroupName: eks-action-group
          Description: "Action Group for EKS Cluster"
          ActionGroupExecutor:
            Lambda: 
              Fn::GetAtt:
                - ActionGroupFunction
                - Arn
          ApiSchema:
            S3:
              S3BucketName: 
                Fn::Join:
                  - ""
                  - - "eks-bedrock-agent-openapi-schema-"
                    - Ref: AWS::AccountId
              S3ObjectKey: open-api-schema.json
      KnowledgeBases:
        - KnowledgeBaseId: 
            Ref: BedrockKnowledgeBase
          Description: "Kubernetes and Amazon EKS Documentation"
          KnowledgeBaseState: ENABLED